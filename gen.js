//Sample model

var cube = " \
solid OpenSCAD_Model\n \
  facet normal -0 0 1\n \
    outer loop\n \
      vertex 63 32 1\n \
      vertex 64 31 1\n \
      vertex 64 32 1\n \
    endloop\n \
  endfacet\n \
  facet normal 0 0 1\n \
    outer loop\n \
      vertex 64 31 1\n \
      vertex 63 32 1\n \
      vertex 63 31 1\n \
    endloop\n \
  endfacet\n \
  facet normal 0 0 -1\n \
    outer loop\n \
      vertex 63 31 0\n \
      vertex 64 32 0\n \
      vertex 64 31 0\n \
    endloop\n \
  endfacet\n \
  facet normal -0 0 -1\n \
    outer loop\n \
      vertex 64 32 0\n \
      vertex 63 31 0\n \
      vertex 63 32 0\n \
    endloop\n \
  endfacet\n \
  facet normal 0 -1 0\n \
    outer loop\n \
      vertex 63 31 0\n \
      vertex 64 31 1\n \
      vertex 63 31 1\n \
    endloop\n \
  endfacet\n \
  facet normal 0 -1 -0\n \
    outer loop\n \
      vertex 64 31 1\n \
      vertex 63 31 0\n \
      vertex 64 31 0\n \
    endloop\n \
  endfacet\n \
  facet normal 1 -0 0\n \
    outer loop\n \
      vertex 64 31 1\n \
      vertex 64 32 0\n \
      vertex 64 32 1\n \
    endloop\n \
  endfacet\n \
  facet normal 1 0 0\n \
    outer loop\n \
      vertex 64 32 0\n \
      vertex 64 31 1\n \
      vertex 64 31 0\n \
    endloop\n \
  endfacet\n \
  facet normal 0 1 -0\n \
    outer loop\n \
      vertex 64 32 0\n \
      vertex 63 32 1\n \
      vertex 64 32 1\n \
    endloop\n \
  endfacet\n \
  facet normal 0 1 0\n \
    outer loop\n \
      vertex 63 32 1\n \
      vertex 64 32 0\n \
      vertex 63 32 0\n \
    endloop\n \
  endfacet\n \
  facet normal -1 0 0\n \
    outer loop\n \
      vertex 63 31 0\n \
      vertex 63 32 1\n \
      vertex 63 32 0\n \
    endloop\n \
  endfacet\n \
  facet normal -1 -0 0\n \
    outer loop\n \
      vertex 63 32 1\n \
      vertex 63 31 0\n \
      vertex 63 31 1\n \
    endloop\n \
  endfacet\n \
endsolid OpenSCAD_Model";

function header()
{
    var output = "";
    output += "#pragma once\n\n";
    output += "//AUTOGENERATED FILE WARNING!!!!!\n\n";
    output += "#ifdef __AVR__\n#include <avr/pgmspace.h>\n#endif\n\n";

    return output;
}

function compressed(model)
{
    var output = "const uint8_t PROGMEM obj[] =\n{\n";

    var ndx = 1; //Save space for size

    var size = 0;
    var verts = [1];

    var lines = model.split('\n');
    for(var i = 0; i < lines.length; i++)
    {
        var line = lines[i];
        if(line.indexOf("vertex") != -1)
        {
            var stlSyntax = line.substring(line.indexOf("vertex")+7); //Remove word vertex
            var components = stlSyntax.split(" ");
            size++;
            for(var j = 0; j < components.length; j++)
            {
                var ndx = verts.indexOf(components[j]);
                if(ndx == -1)
                {
                    verts.push(components[j]);
                    ndx = verts.indexOf(components[j]);
                }
                output += "    "+ndx + ",";
            }
            output += "\n";
        }
    }
    output += "};\n";

    output += "\nconst float ndxToValue[] =\n{\n";
    var vertString = "    " + size.toFixed(2) + ",";
    for(var k = 1; k < verts.length; k++)
    {
        vertString += " " + parseFloat(verts[k]).toFixed(2) + ",";
    }
    output += vertString + "\n";
    output += "};\n";

    return output;
}

var output = header();
output += compressed(cube);
console.log(output);

